{"meta":{"title":"乐闻技术笔记","subtitle":"我想和你","description":"JAVA JavaScript python  乐闻的技术笔记","author":"乐闻","url":"http://yoursite.com","root":"/"},"pages":[{"title":"乐闻x技术笔记","date":"2019-07-03T03:32:46.000Z","updated":"2019-07-03T04:12:56.115Z","comments":true,"path":"about/index.html","permalink":"http://yoursite.com/about/index.html","excerpt":"","text":"乐闻x 明明听了很多大道理，却还是过不好一生"},{"title":"yourdiy","date":"2019-07-03T04:13:56.000Z","updated":"2019-07-03T04:13:56.331Z","comments":true,"path":"yourdiy/index.html","permalink":"http://yoursite.com/yourdiy/index.html","excerpt":"","text":""}],"posts":[{"title":"【设计模式】策略模式","slug":"design-pattern","date":"2019-07-03T08:31:44.000Z","updated":"2019-07-03T06:40:36.300Z","comments":true,"path":"2019/07/03/design-pattern/","link":"","permalink":"http://yoursite.com/2019/07/03/design-pattern/","excerpt":"","text":"策略模式 &emsp;&emsp;定义了一系列算法，并将每一个算法封装起来，使得每个算法都可以相互替代，使算法本身和使用算法的客户端互相独立。 分离算法,选择实现 体现开闭原则，里氏替换原则 策略模式是一个扁平的结构，各个策略实现都是兄弟关系，实现了同一个接口或者继承了同一个抽象类，这样只要使用策略的客户端保持面向抽象编程，就可以动态的切换不同的策略实现以进行替换。","categories":[{"name":"设计模式","slug":"设计模式","permalink":"http://yoursite.com/categories/设计模式/"}],"tags":[{"name":"设计模式","slug":"设计模式","permalink":"http://yoursite.com/tags/设计模式/"},{"name":"策略模式","slug":"策略模式","permalink":"http://yoursite.com/tags/策略模式/"}]}]}